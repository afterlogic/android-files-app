apply plugin: 'com.android.application'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'io.fabric'

android {

    compileSdkVersion 25
    buildToolsVersion "25.0.2"

    defaultConfig {
        applicationId "com.afterlogic.aurora.files"
        minSdkVersion 14
        targetSdkVersion 25
        versionCode getIncrementalVersionCode()
        versionName "1.0.1"
    }

    dataBinding{
        enabled true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }


    signingConfigs {

        Properties signingProperties = new Properties()
        File propsFile = new File("signing/signing.properties");
        if(propsFile.exists()) {
            signingProperties.load(new FileInputStream(propsFile))
        } else {
            throw new IllegalStateException("Signing properties file not exist! File: " + propsFile.absolutePath)
        }

        sign {
            storeFile file(signingProperties['keystore'])
            storePassword signingProperties['keystore.password']
            keyAlias signingProperties['key.alias']
            keyPassword signingProperties['key.password']
        }
    }

    buildTypes {

        release {
            signingConfig signingConfigs.sign
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            signingConfig signingConfigs.sign
            minifyEnabled false
            ext.enableCrashlytics = false
        }

        releaseBeta {
            signingConfig signingConfigs.sign
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            ext.betaDistributionGroupAliases = "aurora-android"
            ext.betaDistributionReleaseNotesFilePath = projectDir.absolutePath + "/lastBetaBuildNotes.txt"
        }
    }
}

ext{
    compatVersion = '25.1.0'
    daggerVersion = '2.8'
    rxJavaVersion = '2.0.1'
    retrofitVersion = '2.1.0'
    okHttpVersion = '3.2.2'
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    testCompile 'junit:junit:4.12'

    //Crashlytics
    compile('com.crashlytics.sdk.android:crashlytics:2.5.5@aar') {
        transitive = true;
    }

    //[START Google libs]
    compile "com.android.support:appcompat-v7:$compatVersion"
    compile "com.android.support:design:$compatVersion"
    //[END Google libs]

    //Dagger - Dependency Injection
    compile "com.google.dagger:dagger:$daggerVersion"
    annotationProcessor "com.google.dagger:dagger-compiler:$daggerVersion"

    //Observable and Stream
    compile "com.annimon:stream:1.1.2"
    compile "io.reactivex.rxjava2:rxandroid:$rxJavaVersion"
    compile "io.reactivex.rxjava2:rxjava:$rxJavaVersion"

    //[START Api helpers]
    compile ("com.squareup.retrofit2:retrofit:$retrofitVersion"){
        //Cause okhttp replaced with my reviewed okhttp library
        exclude group: 'com.squareup.okhttp3'
    }
    compile ("com.squareup.retrofit2:converter-gson:$retrofitVersion"){
        //Cause okhttp replaced with my reviewed okhttp library
        exclude group: 'com.squareup.okhttp3'
    }
    compile ('com.jakewharton.retrofit:retrofit2-rxjava2-adapter:1.0.0'){
        //Cause okhttp replaced with my reviewed okhttp library
        exclude group: 'com.squareup.okhttp3'
    }
    compile "com.github.SunnyDayDev.okhttp:okhttp:$okHttpVersion"
    compile "com.github.SunnyDayDev.okhttp:logging-interceptor:$okHttpVersion"
    compile 'com.google.code.gson:gson:2.7'
    //[END Api helpers]

    //Image loader - Glide
    compile 'com.github.bumptech.glide:glide:3.7.0'
    compile 'com.github.chrisbanes:PhotoView:1.3.1'

    //Floating action button
    compile 'com.getbase:floatingactionbutton:1.10.1'
    //Material progress bar
    compile 'me.zhanghai.android.materialprogressbar:library:1.1.5'
    compile 'com.j256.ormlite:ormlite-android:4.48'
}

/**
 * Get version code from version.properties file and increment it if increment flag setted.
 */
def int getIncrementalVersionCode(){
    def versionPropsFile = file('version.properties')

    if (versionPropsFile.canRead()) {
        def Properties versionProps = new Properties()

        versionProps.load(new FileInputStream(versionPropsFile))

        def code = versionProps['VERSION_CODE'].toInteger()

        //[START Check is need increment version code]
        def incrementVersion = false;
        List<String> runTasks = gradle.startParameter.getTaskNames();
        for (String item:runTasks){
            if (item.contains("assembleReleaseBeta")){
                incrementVersion = true;
                break;
            }
        }
        //[END Check is need increment version code]

        if(incrementVersion) {
            code = code + 1;
            versionProps['VERSION_CODE'] = code.toString()
            versionProps.store(versionPropsFile.newWriter(), null)
            return code;
        }else{
            return code;
        }
    }
    else {
        throw new GradleException("Could not read version.properties!")
    }
}