apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'org.greenrobot.greendao'

apply plugin: 'me.sunnydaydev.autoversion'

project.ext.set("signingFolder", file("../signing").toString())
apply from: '../signing/signings.gradle'

android {

    compileSdkVersion 26
    buildToolsVersion "26.0.1"

    defaultConfig {

        buildConfigField "boolean", "DEBUG_HTTP", "true"

        applicationId "com.afterlogic.aurora.files"
        minSdkVersion 15
        targetSdkVersion 26

        versionCode autoVersion.versionCode
        versionName autoVersion.versionName

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        vectorDrawables.useSupportLibrary = true

    }

    dataBinding{

        enabled true

    }

    compileOptions {

        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8

    }

    dexOptions {

        javaMaxHeapSize "2g"
        jumboMode true

    }

    buildTypes {

        release {

            signingConfig signingConfigs.sign
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

        }

        debug {

            if (project.hasProperty("debug.nohttp")) {

                buildConfigField "boolean", "DEBUG_HTTP", "false"

            }

            signingConfig signingConfigs.sign
            minifyEnabled false
            ext.enableCrashlytics = false

        }

        releaseBeta {

            signingConfig signingConfigs.sign
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            ext.betaDistributionGroupAliases = "aurora-android"
            ext.betaDistributionReleaseNotesFilePath = autoVersion.releaseNotesFilePath

        }
    }

    packagingOptions {

        exclude 'META-INF/rxjava.properties'

    }

}

autoVersion {

    increments {

        general {

            onBuildTypes "release"
            versionNameIncrement "0.0.1"
            versionCodeIncrement 1
            confirmByDialog true

        }

    }

}

greendao {

    schemaVersion 1

}

dependencies {

    implementation fileTree(include: ['*.jar'], dir: 'libs')

    //For test
    androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testImplementation 'junit:junit:4.12'
    // Optional -- Mockito framework
    testImplementation 'org.mockito:mockito-core:2.7.19'

    //Dagger - Dependency Injection
    implementation "com.google.dagger:dagger:${rootProject.daggerVersion}"
    annotationProcessor "com.google.dagger:dagger-compiler:${rootProject.daggerVersion}"
    implementation "com.google.dagger:dagger-android:${rootProject.daggerVersion}"
    implementation "com.google.dagger:dagger-android-support:${rootProject.daggerVersion}"
    annotationProcessor "com.google.dagger:dagger-android-processor:${rootProject.daggerVersion}"

    //Compat
    implementation "com.android.support:appcompat-v7:${rootProject.compatVersion}"
    implementation "com.android.support:design:${rootProject.compatVersion}"
    implementation "com.android.support:recyclerview-v7:${rootProject.compatVersion}"
    //implementation "com.android.support:customtabs:${rootProject.compatVersion}"
    implementation "com.android.support.constraint:constraint-layout:${rootProject.constraintLayoutVersion}"

    //Observable and Stream
    implementation "com.annimon:stream:${rootProject.streamVersion}"
    implementation "io.reactivex.rxjava2:rxjava:${rootProject.rxJavaVersion}"
    implementation "io.reactivex.rxjava2:rxandroid:${rootProject.rxJavaAndroidVersion}"

    //[START Api helpers]
    implementation "com.squareup.retrofit2:retrofit:${rootProject.retrofitVersion}"
    implementation "com.squareup.retrofit2:converter-gson:${rootProject.retrofitVersion}"
    implementation "com.squareup.retrofit2:converter-scalars:${rootProject.retrofitVersion}"
    implementation "com.squareup.retrofit2:adapter-rxjava2:${rootProject.retrofitVersion}"
    implementation "com.squareup.okhttp3:okhttp:${rootProject.okHttpVersion}"
    implementation "com.squareup.okhttp3:logging-interceptor:${rootProject.okHttpVersion}"
    implementation "com.google.code.gson:gson:${rootProject.gsonVersion}"
    //[END Api helpers]

    //Floating action button
    implementation "com.getbase:floatingactionbutton:${rootProject.fabVersion}"
    //Material progress bar
    implementation "me.zhanghai.android.materialprogressbar:library:$rootProject.materialProgressBarVersion"

    //DB
    implementation "org.greenrobot:greendao:${rootProject.greenDaoVersion}"

    //EventBus
    implementation "org.greenrobot:eventbus:${rootProject.eventBusVersion}"

    //Pictures load
    implementation "com.github.bumptech.glide:glide:${rootProject.glideVersion}"
    implementation "com.github.chrisbanes:PhotoView:${rootProject.photoViewVersion}"

    //Preferences
    implementation "net.grandcentrix.tray:tray:${rootProject.trayPrefsVersion}"

    //Crash and use analytics
    implementation("com.crashlytics.sdk.android:crashlytics:${rootProject.crashlyticsVersion}") {
        transitive = true
    }

    implementation "com.android.support.constraint:constraint-layout:$rootProject.constraintLayoutVersion"

    implementation "android.arch.lifecycle:runtime:$rootProject.architectureComponentsVersion"
    implementation "android.arch.lifecycle:extensions:$rootProject.architectureComponentsVersion"
    annotationProcessor "android.arch.lifecycle:compiler:$rootProject.architectureComponentsVersion"

    // Navigation
    implementation "ru.terrakok.cicerone:cicerone:$rootProject.ciceroneVersion"


    implementation "com.github.nitrico.lastadapter:lastadapter:$rootProject.lastAdapterVersion"

    implementation "org.parceler:parceler-api:$rootProject.parcellerVersion"
    annotationProcessor "org.parceler:parceler:$rootProject.parcellerVersion"

}

/**
 * Result apk naming.
 */
android.applicationVariants.all { variant ->

    def appName
    //Check if an applicationName property is supplied; if not use the name of the parent project.
    if (project.hasProperty("applicationName")) {
        appName = applicationName
    } else {
        appName = parent.name
    }

    variant.outputs.all { output ->

        def newApkName
        //If there's no ZipAlign task it means that our artifact will be unaligned and we need to mark it as such.
        if (output.zipAlign) {
            newApkName = "${appName}-${project.name}-${output.baseName}-${variant.versionName}-b${variant.versionCode}.apk"
        } else {
            newApkName = "${appName}-${project.name}-${output.baseName}-${variant.versionName}-b${variant.versionCode}-unaligned.apk"
        }
        outputFileName = newApkName

    }

}